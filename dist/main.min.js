(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/jakegabb/Sites/flappy-bird/src/js/main.js":[function(require,module,exports){
var mainState = {
	preload: function() {

		// This function will be executed at the beginning     
        // That's where we load the images and sounds 
        game.load.image('bird', 'assets/bird.png');
        game.load.image('pipe', 'assets/pipe.png');
        game.load.audio('jump', 'assets/jump.wav');

	},
	create: function() {

		this.jumpSound = game.add.audio('jump');

		//Score
		this.score = 0;
		this.labelScore = game.add.text(20, 20, "0", { font: '30px Arial', fill: '#ffffff'});

		//Pipes
		this.pipes = game.add.group();
		game.timer = game.time.events.loop(1500, this.addRowOfPipes, this); 

		// This function is called after the preload function     
        // Here we set up the game, display sprites, etc.
        console.log("Create");
        game.stage.backgroundColor = '#71c5cf';

        //Start physics engine
        game.physics.startSystem(Phaser.Physics.ARCADE);

        //Display bird
        this.bird = game.add.sprite(100, 245, 'bird');

        //Enable bird's physics system
        game.physics.arcade.enable(this.bird);

        //Add gravity to the bird to make it fall
        this.bird.body.gravity.y = 1000;

        //Call jump function when spacekey is pressed
        var spaceKey = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
        spaceKey.onDown.add(this.jump, this);

        //move anchor to the left and downward
        this.bird.anchor.setTo(-0.2, 0.5);

	},
	update: function() {

		// This function is called 60 times per second    
        // It contains the game's logic 
        console.log("Updating game");

        //If bird is out of screen, call restartGame function
        if (this.bird.y < 0 || this.bird.y > 490) {
        	this.restartGame();
        }
        game.physics.arcade.overlap(this.bird, this.pipes, this.hitPipe, null, this);

        if (this.bird.angle < 20) {
        	this.bird.angle += 1;
        }

	},
	jump: function() {

		console.log(this);
		if (this.bird.alive == false) {
			return false;
		}
		this.bird.body.velocity.y = -350;
		var animation = game.add.tween(this.bird);
		animation.to({angle: -20}, 100);
		animation.start();
		this.jumpSound.play();

	},
	restartGame: function() {
		game.state.start('main');
	},
	hitPipe: function() {

		if (this.bird.alive == false) {
			return false;
		};

		//Set alive property of bird to false
		this.bird.alive = false;

		//prevent new pipes from appearing
		game.time.events.remove(game.timer);

		//go through all the pipes, and stop their movement
		this.pipes.forEach(function(p){
			p.body.velocity.x = 0;
		}, this);

	},
	addOnePipe: function(x, y) {
		
		console.log("Adding a pipe");
		//Create a pipe at the position x and y
		var pipe = game.add.sprite(x, y, 'pipe');

		//Add the pipe to our previously created group
		this.pipes.add(pipe);

		//Enable physics on the pipe
		game.physics.arcade.enable(pipe);

		//Add velocity to the pipe to make it move left
		pipe.body.velocity.x = -200;

		//Automatically kill the pipe when it's no longer visible
		pipe.checkWorldBounds = true;
		pipe.outOfBoundsKill = true;

	},
	addRowOfPipes: function() {

		//Randomly pick number between 1 and 5.
		//This will be the hole position
		var hole = Math.floor(Math.random() * 5) + 1;

		//Add the 6 pipes
		//With one big hole at position 'hole' and 'hole + 1'
		for (var i = 0; i < 8; i++) {
			if (i != hole && i != hole + 1) {
				this.addOnePipe(400, i * 60 + 10);
			}
		}

		this.score += 1;
		this.labelScore.text = this.score;

	}
}
var game = new Phaser.Game(400, 490, Phaser.AUTO, 'zflappybird-game');
game.state.add('main', mainState);
game.state.start('main');
},{}]},{},["/Users/jakegabb/Sites/flappy-bird/src/js/main.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvanMvbWFpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwidmFyIG1haW5TdGF0ZSA9IHtcblx0cHJlbG9hZDogZnVuY3Rpb24oKSB7XG5cblx0XHQvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgZXhlY3V0ZWQgYXQgdGhlIGJlZ2lubmluZyAgICAgXG4gICAgICAgIC8vIFRoYXQncyB3aGVyZSB3ZSBsb2FkIHRoZSBpbWFnZXMgYW5kIHNvdW5kcyBcbiAgICAgICAgZ2FtZS5sb2FkLmltYWdlKCdiaXJkJywgJ2Fzc2V0cy9iaXJkLnBuZycpO1xuICAgICAgICBnYW1lLmxvYWQuaW1hZ2UoJ3BpcGUnLCAnYXNzZXRzL3BpcGUucG5nJyk7XG4gICAgICAgIGdhbWUubG9hZC5hdWRpbygnanVtcCcsICdhc3NldHMvanVtcC53YXYnKTtcblxuXHR9LFxuXHRjcmVhdGU6IGZ1bmN0aW9uKCkge1xuXG5cdFx0dGhpcy5qdW1wU291bmQgPSBnYW1lLmFkZC5hdWRpbygnanVtcCcpO1xuXG5cdFx0Ly9TY29yZVxuXHRcdHRoaXMuc2NvcmUgPSAwO1xuXHRcdHRoaXMubGFiZWxTY29yZSA9IGdhbWUuYWRkLnRleHQoMjAsIDIwLCBcIjBcIiwgeyBmb250OiAnMzBweCBBcmlhbCcsIGZpbGw6ICcjZmZmZmZmJ30pO1xuXG5cdFx0Ly9QaXBlc1xuXHRcdHRoaXMucGlwZXMgPSBnYW1lLmFkZC5ncm91cCgpO1xuXHRcdGdhbWUudGltZXIgPSBnYW1lLnRpbWUuZXZlbnRzLmxvb3AoMTUwMCwgdGhpcy5hZGRSb3dPZlBpcGVzLCB0aGlzKTsgXG5cblx0XHQvLyBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBhZnRlciB0aGUgcHJlbG9hZCBmdW5jdGlvbiAgICAgXG4gICAgICAgIC8vIEhlcmUgd2Ugc2V0IHVwIHRoZSBnYW1lLCBkaXNwbGF5IHNwcml0ZXMsIGV0Yy5cbiAgICAgICAgY29uc29sZS5sb2coXCJDcmVhdGVcIik7XG4gICAgICAgIGdhbWUuc3RhZ2UuYmFja2dyb3VuZENvbG9yID0gJyM3MWM1Y2YnO1xuXG4gICAgICAgIC8vU3RhcnQgcGh5c2ljcyBlbmdpbmVcbiAgICAgICAgZ2FtZS5waHlzaWNzLnN0YXJ0U3lzdGVtKFBoYXNlci5QaHlzaWNzLkFSQ0FERSk7XG5cbiAgICAgICAgLy9EaXNwbGF5IGJpcmRcbiAgICAgICAgdGhpcy5iaXJkID0gZ2FtZS5hZGQuc3ByaXRlKDEwMCwgMjQ1LCAnYmlyZCcpO1xuXG4gICAgICAgIC8vRW5hYmxlIGJpcmQncyBwaHlzaWNzIHN5c3RlbVxuICAgICAgICBnYW1lLnBoeXNpY3MuYXJjYWRlLmVuYWJsZSh0aGlzLmJpcmQpO1xuXG4gICAgICAgIC8vQWRkIGdyYXZpdHkgdG8gdGhlIGJpcmQgdG8gbWFrZSBpdCBmYWxsXG4gICAgICAgIHRoaXMuYmlyZC5ib2R5LmdyYXZpdHkueSA9IDEwMDA7XG5cbiAgICAgICAgLy9DYWxsIGp1bXAgZnVuY3Rpb24gd2hlbiBzcGFjZWtleSBpcyBwcmVzc2VkXG4gICAgICAgIHZhciBzcGFjZUtleSA9IGdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5TUEFDRUJBUik7XG4gICAgICAgIHNwYWNlS2V5Lm9uRG93bi5hZGQodGhpcy5qdW1wLCB0aGlzKTtcblxuICAgICAgICAvL21vdmUgYW5jaG9yIHRvIHRoZSBsZWZ0IGFuZCBkb3dud2FyZFxuICAgICAgICB0aGlzLmJpcmQuYW5jaG9yLnNldFRvKC0wLjIsIDAuNSk7XG5cblx0fSxcblx0dXBkYXRlOiBmdW5jdGlvbigpIHtcblxuXHRcdC8vIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIDYwIHRpbWVzIHBlciBzZWNvbmQgICAgXG4gICAgICAgIC8vIEl0IGNvbnRhaW5zIHRoZSBnYW1lJ3MgbG9naWMgXG4gICAgICAgIGNvbnNvbGUubG9nKFwiVXBkYXRpbmcgZ2FtZVwiKTtcblxuICAgICAgICAvL0lmIGJpcmQgaXMgb3V0IG9mIHNjcmVlbiwgY2FsbCByZXN0YXJ0R2FtZSBmdW5jdGlvblxuICAgICAgICBpZiAodGhpcy5iaXJkLnkgPCAwIHx8IHRoaXMuYmlyZC55ID4gNDkwKSB7XG4gICAgICAgIFx0dGhpcy5yZXN0YXJ0R2FtZSgpO1xuICAgICAgICB9XG4gICAgICAgIGdhbWUucGh5c2ljcy5hcmNhZGUub3ZlcmxhcCh0aGlzLmJpcmQsIHRoaXMucGlwZXMsIHRoaXMuaGl0UGlwZSwgbnVsbCwgdGhpcyk7XG5cbiAgICAgICAgaWYgKHRoaXMuYmlyZC5hbmdsZSA8IDIwKSB7XG4gICAgICAgIFx0dGhpcy5iaXJkLmFuZ2xlICs9IDE7XG4gICAgICAgIH1cblxuXHR9LFxuXHRqdW1wOiBmdW5jdGlvbigpIHtcblxuXHRcdGNvbnNvbGUubG9nKHRoaXMpO1xuXHRcdGlmICh0aGlzLmJpcmQuYWxpdmUgPT0gZmFsc2UpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0dGhpcy5iaXJkLmJvZHkudmVsb2NpdHkueSA9IC0zNTA7XG5cdFx0dmFyIGFuaW1hdGlvbiA9IGdhbWUuYWRkLnR3ZWVuKHRoaXMuYmlyZCk7XG5cdFx0YW5pbWF0aW9uLnRvKHthbmdsZTogLTIwfSwgMTAwKTtcblx0XHRhbmltYXRpb24uc3RhcnQoKTtcblx0XHR0aGlzLmp1bXBTb3VuZC5wbGF5KCk7XG5cblx0fSxcblx0cmVzdGFydEdhbWU6IGZ1bmN0aW9uKCkge1xuXHRcdGdhbWUuc3RhdGUuc3RhcnQoJ21haW4nKTtcblx0fSxcblx0aGl0UGlwZTogZnVuY3Rpb24oKSB7XG5cblx0XHRpZiAodGhpcy5iaXJkLmFsaXZlID09IGZhbHNlKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHRcdC8vU2V0IGFsaXZlIHByb3BlcnR5IG9mIGJpcmQgdG8gZmFsc2Vcblx0XHR0aGlzLmJpcmQuYWxpdmUgPSBmYWxzZTtcblxuXHRcdC8vcHJldmVudCBuZXcgcGlwZXMgZnJvbSBhcHBlYXJpbmdcblx0XHRnYW1lLnRpbWUuZXZlbnRzLnJlbW92ZShnYW1lLnRpbWVyKTtcblxuXHRcdC8vZ28gdGhyb3VnaCBhbGwgdGhlIHBpcGVzLCBhbmQgc3RvcCB0aGVpciBtb3ZlbWVudFxuXHRcdHRoaXMucGlwZXMuZm9yRWFjaChmdW5jdGlvbihwKXtcblx0XHRcdHAuYm9keS52ZWxvY2l0eS54ID0gMDtcblx0XHR9LCB0aGlzKTtcblxuXHR9LFxuXHRhZGRPbmVQaXBlOiBmdW5jdGlvbih4LCB5KSB7XG5cdFx0XG5cdFx0Y29uc29sZS5sb2coXCJBZGRpbmcgYSBwaXBlXCIpO1xuXHRcdC8vQ3JlYXRlIGEgcGlwZSBhdCB0aGUgcG9zaXRpb24geCBhbmQgeVxuXHRcdHZhciBwaXBlID0gZ2FtZS5hZGQuc3ByaXRlKHgsIHksICdwaXBlJyk7XG5cblx0XHQvL0FkZCB0aGUgcGlwZSB0byBvdXIgcHJldmlvdXNseSBjcmVhdGVkIGdyb3VwXG5cdFx0dGhpcy5waXBlcy5hZGQocGlwZSk7XG5cblx0XHQvL0VuYWJsZSBwaHlzaWNzIG9uIHRoZSBwaXBlXG5cdFx0Z2FtZS5waHlzaWNzLmFyY2FkZS5lbmFibGUocGlwZSk7XG5cblx0XHQvL0FkZCB2ZWxvY2l0eSB0byB0aGUgcGlwZSB0byBtYWtlIGl0IG1vdmUgbGVmdFxuXHRcdHBpcGUuYm9keS52ZWxvY2l0eS54ID0gLTIwMDtcblxuXHRcdC8vQXV0b21hdGljYWxseSBraWxsIHRoZSBwaXBlIHdoZW4gaXQncyBubyBsb25nZXIgdmlzaWJsZVxuXHRcdHBpcGUuY2hlY2tXb3JsZEJvdW5kcyA9IHRydWU7XG5cdFx0cGlwZS5vdXRPZkJvdW5kc0tpbGwgPSB0cnVlO1xuXG5cdH0sXG5cdGFkZFJvd09mUGlwZXM6IGZ1bmN0aW9uKCkge1xuXG5cdFx0Ly9SYW5kb21seSBwaWNrIG51bWJlciBiZXR3ZWVuIDEgYW5kIDUuXG5cdFx0Ly9UaGlzIHdpbGwgYmUgdGhlIGhvbGUgcG9zaXRpb25cblx0XHR2YXIgaG9sZSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDUpICsgMTtcblxuXHRcdC8vQWRkIHRoZSA2IHBpcGVzXG5cdFx0Ly9XaXRoIG9uZSBiaWcgaG9sZSBhdCBwb3NpdGlvbiAnaG9sZScgYW5kICdob2xlICsgMSdcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHRcdFx0aWYgKGkgIT0gaG9sZSAmJiBpICE9IGhvbGUgKyAxKSB7XG5cdFx0XHRcdHRoaXMuYWRkT25lUGlwZSg0MDAsIGkgKiA2MCArIDEwKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLnNjb3JlICs9IDE7XG5cdFx0dGhpcy5sYWJlbFNjb3JlLnRleHQgPSB0aGlzLnNjb3JlO1xuXG5cdH1cbn1cbnZhciBnYW1lID0gbmV3IFBoYXNlci5HYW1lKDQwMCwgNDkwLCBQaGFzZXIuQVVUTywgJ3pmbGFwcHliaXJkLWdhbWUnKTtcbmdhbWUuc3RhdGUuYWRkKCdtYWluJywgbWFpblN0YXRlKTtcbmdhbWUuc3RhdGUuc3RhcnQoJ21haW4nKTsiXX0=
